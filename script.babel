function calculate(){
d3.selectAll("svg").remove();
        let annualCont = document.getElementById("annualCont").value;
        let investRor = document.getElementById("investRor").value;
        let nowTime = document.getElementById("nowTime").value;
        let oldTime = document.getElementById("oldTime").value; 
        let  currMoney = document.getElementById("currMoney").value; 
        let liveCost = document.getElementById("liveCost").value;
        let retireRor = document.getElementById("retireRor").value;
        let retireTime = document.getElementById("retireTime").value;
        let inflaRate = document.getElementById("inflaRate").value; 
 
// End of year despoits assumed for below equations
  let i;
  let j;
  let k;
    let fvArr = [];
 for(i=0;i<=(oldTime-nowTime);i++){
 fvArr.push([(annualCont*((((1+(investRor/100))**(i)-1))/(investRor/100))+(currMoney*(1+(investRor/100))**(i)))]);
 };
 
 for(j=0; j<=retireTime-1; j++){
((fvArr[Number(oldTime-nowTime+j)])*(1+(retireRor/100))-(liveCost*((1+(inflaRate/100))**(j)))) > 0 ? fvArr.push([((fvArr[Number(oldTime-nowTime+j)])*(1+(retireRor/100))-(liveCost*((1+(inflaRate/100))**(j))))]) : fvArr.push([0])
 };

 for(k=0; k<=(Number(oldTime)-Number(nowTime)+Number(retireTime));k++){
   let realAge = k + Number(nowTime);
   fvArr[k].unshift(realAge);
 };

  document.getElementById("finalHolder").style.display = "block";
  
document.getElementById("futureV").innerHTML = (fvArr[oldTime-nowTime][1]).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'); 

const margin = {top: 40, right: 40, bottom: 40, left: 40};

const padding = 75;

const width = 900;

const height = 450;

const barWidth = (width-padding-padding)/(fvArr.length);

const xScale = d3.scaleLinear().domain([0, d3.max(fvArr, (d)=>d[0])]).range([padding,width-padding]);

const yScale = d3.scaleLinear().domain([0, d3.max(fvArr,(d)=>d[1])]).range([height-padding,0]);
  
const svg = d3.select(".container")
              .append("svg")
              .attr("width", width)
              .attr("height", height)
              .style("background-color", "#fff");

const tooltip = d3.select(".visHolder")
    .append("div")
    .style("position", "absolute")
    .style("z-index", "10")
    .style("opacity",0)
    .attr("class", "tooltip");

svg.selectAll("rect")
   .data(fvArr)
   .enter()
   .append("rect")
   .attr("width", barWidth)
   .attr("height", (d, i)=>{return (yScale(0)-yScale(d[1]))})
   .attr("x", (d, i)=>{return padding+(i*(barWidth))})
   .attr("y", (d, i)=>{return yScale(d[1])})
   .attr("fill", "#006000")
   .attr("class","bar")
	 .on("mouseover", function(d,i) {tooltip.transition().duration(200).style('opacity', .9).style('left', (i * barWidth) + 0 + 'px').style('top', height - d + 'px').style('transform', 'translateX(60px)');                   tooltip.html("Age: "+ d[0] + "<br/>$ "  + d[1].toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,')).duration(0).style("left", d + "px").style("top", d + "px");})
  .on("mouseout", function(d) {tooltip.transition().duration(500).style("opacity",0);});
const yAxis = d3.axisLeft(yScale);
const xAxis = d3.axisBottom(xScale);
svg.append("g")
   .attr("transform", "translate("+ padding +", 0)")
   .call(yAxis);
svg.append("g")
   .attr("transform", "translate(0,"+(height-padding)+")")
   .call(xAxis);
};
(calculate())();